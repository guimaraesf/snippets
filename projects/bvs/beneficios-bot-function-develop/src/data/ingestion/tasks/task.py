#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# ================================================================================================
# Module: monthly_tasks.py
# Author: Fernando Theodoro Guimar√£es
# E-mail: fernando.guimaraes@boavistascpc.com.br
# Description: This module is responsible for organizing all monthly ingest tasks.
# Value Stream: Data
# Squad: Dados Alternativos
# ================================================================================================


import os
import sys
from collections import namedtuple

# Add the parent directory to the Python path
sys.path.append(os.path.abspath("../"))
from variables import Variables
from functions import Functions
from schemas import Schemas
from columns import *


class IngestionTasks:
    """
    This class is responsible for organizing all monthly ingest tasks.
    """

    def __init__(
        self,
        ingestion_args,
        named_tuple=namedtuple,
        variables=Variables,
        schemas=Schemas(),
        functions=Functions(),
    ):
        self.ingestion_args = ingestion_args
        self.named_tuple = named_tuple
        self.variables = variables
        self.schemas = schemas
        self.functions = functions
        self.append_mode = "append"
        self.overwrite_mode = "overwrite"

    def __create_ingestion_task(self):
        return self.named_tuple(
            "ingestion_task",
            [
                "step_name",
                "path_to_be_load",
                "file_name",
                "tranform_functions",
                "table_schema",
                "selection_columns",
                "table_name",
                "write_mode",
                "number_of_periods",
            ],
        )

    def get_ingestion_tasks(self):
        """
        This method is responsible for organizing all monthly ingest tasks.
        :return: A dictionary with all monthly ingest tasks.
        """
        ingestion_task = self.__create_ingestion_task()
        schemas = self.schemas.get_all_schemas()
        tasks = {
            "auxilio-brasil": ingestion_task(
                "auxilio-brasil",
                "AUXBRASIL/ENTRADA/",
                self.variables.FILENAME_AUXBRASIL,
                self.functions.columns_auxilio_brasil,
                schemas[self.variables.FILENAME_AUXBRASIL],
                select_columns_AuxilioBrasil,
                self.ingestion_args["table_auxilio_brasil"],
                self.append_mode,
                6,
            ),
            "auxilio-emergencial": ingestion_task(
                "auxilio-emergencial",
                "AUXEMERGENCIAL/ENTRADA/",
                self.variables.FILENAME_AUXEMERG,
                self.functions.columns_auxilio_emergencial,
                schemas[self.variables.FILENAME_AUXEMERG],
                select_columns_AuxilioEmergencial,
                self.ingestion_args["table_auxilio_emergencial"],
                self.append_mode,
                6,
            ),
            "novo-bolsa-familia": ingestion_task(
                "novo-bolsa-familia",
                "BOLSAFAMILIA/NOVO/ENTRADA/",
                self.variables.FILENAME_NOVO_BOLSA_FAMILIA,
                self.functions.columns_novo_bolsa_familia,
                schemas[self.variables.FILENAME_NOVO_BOLSA_FAMILIA],
                select_columns_Novo_BolsaFamilia,
                self.ingestion_args["table_novo_bolsa_familia"],
                self.append_mode,
                6,
            ),
            "bolsa-pagamentos": ingestion_task(
                "bolsa-pagamentos",
                "BOLSAFAMILIA/SAQUES/ENTRADA/",
                self.variables.FILENAME_BOLSA_FAMILIA_SQ,
                self.functions.columns_bolsafamilia_saques,
                schemas[self.variables.FILENAME_BOLSA_FAMILIA_SQ],
                select_columns_BolsaFamilia_Saques,
                self.ingestion_args["table_bolsafamilia_sa"],
                self.append_mode,
                6,
            ),
            "bolsa-saques": ingestion_task(
                "bolsa-saques",
                "BOLSAFAMILIA/PAGAMENTOS/ENTRADA/",
                self.variables.FILENAME_BOLSA_FAMILIA_PGTO,
                self.functions.columns_bolsafamilia_pagamentos,
                schemas[self.variables.FILENAME_BOLSA_FAMILIA_PGTO],
                select_columns_BolsaFamilia_Pagamentos,
                self.ingestion_args["table_bolsafamilia_pa"],
                self.append_mode,
                6,
            ),
            "peti": ingestion_task(
                "peti",
                "PETI/ENTRADA/",
                self.variables.FILENAME_PETI,
                self.functions.columns_peti,
                schemas[self.variables.FILENAME_PETI],
                select_columns_PETI,
                self.ingestion_args["table_peti"],
                self.append_mode,
                6,
            ),
            "bpc": ingestion_task(
                "bpc",
                "BPC/ENTRADA/",
                self.variables.FILENAME_BPC,
                self.functions.columns_bpc,
                schemas[self.variables.FILENAME_BPC],
                select_columns_BPC,
                self.ingestion_args["table_bpc"],
                self.append_mode,
                6,
            ),
            "garantia-safra": ingestion_task(
                "garantia-safra",
                "GARANTIASAFRA/ENTRADA/",
                self.variables.FILENAME_GARANTIA_SAFRA,
                self.functions.columns_garantia_safra,
                schemas[self.variables.FILENAME_GARANTIA_SAFRA],
                select_columns_GarantiaSafra,
                self.ingestion_args["table_garantias_safra"],
                self.append_mode,
                6,
            ),
            "seguro-defeso": ingestion_task(
                "seguro-defeso",
                "SEGURODEFESO/ENTRADA/",
                self.variables.FILENAME_SEGURO_DEFESO,
                self.functions.columns_seguro_defeso,
                schemas[self.variables.FILENAME_SEGURO_DEFESO],
                select_columns_SeguroDefeso,
                self.ingestion_args["table_seguro_defeso"],
                self.append_mode,
                6,
            ),
            "trabalhador-formal": ingestion_task(
                "seguro-desemprego",
                "SEGURODESEMPREGO/TRABFORMAL/ENTRADA/",
                self.variables.FILENAME_TRAB_FORMAL,
                self.functions.columns_trab_formal,
                schemas[self.variables.FILENAME_TRAB_FORMAL],
                select_columns_TrabFormal,
                self.ingestion_args["table_trab_formal"],
                self.append_mode,
                6,
            ),
            "empregado-domestico": ingestion_task(
                "seguro-desemprego",
                "SEGURODESEMPREGO/EMPRDOMESTICO/ENTRADA/",
                self.variables.FILENAME_EMPR_DOMESTICO,
                self.functions.columns_empr_domestico,
                schemas[self.variables.FILENAME_EMPR_DOMESTICO],
                select_columns_EmprDomestico,
                self.ingestion_args["table_empr_domestico"],
                self.append_mode,
                6,
            ),
            "trabalhador-resgatado": ingestion_task(
                "seguro-desemprego",
                "SEGURODESEMPREGO/TRABRESGATADO/ENTRADA/",
                self.variables.FILENAME_TRAB_RESGATADO,
                self.functions.columns_trab_resgatado,
                schemas[self.variables.FILENAME_TRAB_RESGATADO],
                select_columns_TrabResgatado,
                self.ingestion_args["table_trab_resgatado"],
                self.append_mode,
                6,
            ),
            "bolsa-qualificacao": ingestion_task(
                "seguro-desemprego",
                "SEGURODESEMPREGO/BOLSAQUALIFIC/ENTRADA/",
                self.variables.FILENAME_BOLSA_QUALIFIC,
                self.functions.columns_bolsa_qualific,
                schemas[self.variables.FILENAME_BOLSA_QUALIFIC],
                select_columns_BolsaQualific,
                self.ingestion_args["table_bolsa_qualific"],
                self.append_mode,
                6,
            ),
            "pescador-artesanal": ingestion_task(
                "seguro-desemprego",
                "SEGURODESEMPREGO/PESCARTESANAL/ENTRADA/",
                self.variables.FILENAME_PESC_ARTESANAL,
                self.functions.columns_pesc_artesanal,
                schemas[self.variables.FILENAME_PESC_ARTESANAL],
                select_columns_PescArtesanal,
                self.ingestion_args["table_pesc_artesanal"],
                self.append_mode,
                6,
            ),
            "aposentados-bacen": ingestion_task(
                "servidores-federais",
                "SERVIDORES/APOSENTADOS/BACEN/ENTRADA/",
                self.variables.FILENAME_APOSENTADOS_BACEN,
                self.functions.columns_aposentados,
                schemas[self.variables.FILENAME_APOSENTADOS_BACEN],
                select_columns_Aposentados,
                self.ingestion_args["table_aposentados"],
                self.append_mode,
                6,
            ),
            "aposetandos-siape": ingestion_task(
                "servidores-federais",
                "SERVIDORES/APOSENTADOS/SIAPE/ENTRADA/",
                self.variables.FILENAME_APOSENTADOS_SIAPE,
                self.functions.columns_aposentados,
                schemas[self.variables.FILENAME_APOSENTADOS_SIAPE],
                select_columns_Aposentados,
                self.ingestion_args["table_aposentados"],
                self.append_mode,
                6,
            ),
            "militares": ingestion_task(
                "servidores-federais",
                "SERVIDORES/MILITARES/ENTRADA/",
                self.variables.FILENAME_MILITARES,
                self.functions.columns_militares,
                schemas[self.variables.FILENAME_MILITARES],
                select_columns_Militares,
                self.ingestion_args["table_militares"],
                self.append_mode,
                6,
            ),
            "pensionistas-siape": ingestion_task(
                "servidores-federais",
                "SERVIDORES/PENSIONISTAS/SIAPE/ENTRADA/",
                self.variables.FILENAME_PENSIONISTAS_SIAPE,
                self.functions.columns_pensionistas,
                schemas[self.variables.FILENAME_PENSIONISTAS_SIAPE],
                select_columns_Pensionistas,
                self.ingestion_args["table_pensionistas"],
                self.append_mode,
                6,
            ),
            "pensionistas-bacen": ingestion_task(
                "servidores-federais",
                "SERVIDORES/PENSIONISTAS/BACEN/ENTRADA/",
                self.variables.FILENAME_PENSIONISTAS_BACEN,
                self.functions.columns_pensionistas,
                schemas[self.variables.FILENAME_PENSIONISTAS_BACEN],
                select_columns_Pensionistas,
                self.ingestion_args["table_pensionistas"],
                self.append_mode,
                6,
            ),
            "pensionistas-defesa": ingestion_task(
                "servidores-federais",
                "SERVIDORES/PENSIONISTAS/DEFESA/ENTRADA/",
                self.variables.FILENAME_PENSIONISTAS_DEFESA,
                self.functions.columns_pensionistas,
                schemas[self.variables.FILENAME_PENSIONISTAS_DEFESA],
                select_columns_Pensionistas,
                self.ingestion_args["table_pensionistas"],
                self.append_mode,
                6,
            ),
            "reserva-militares": ingestion_task(
                "servidores-federais",
                "SERVIDORES/RESERVAMILIARES/ENTRADA/",
                self.variables.FILENAME_RESERVA_MILITARES,
                self.functions.columns_reserva_militares,
                schemas[self.variables.FILENAME_RESERVA_MILITARES],
                select_columns_Reserva_Ref_Militares,
                self.ingestion_args["table_reserva_ref_militares"],
                self.append_mode,
                6,
            ),
            "servidores-bacen": ingestion_task(
                "servidores-federais",
                "SERVIDORES/SERVPUBLICOS/BACEN/ENTRADA/",
                self.variables.FILENAME_SERVIDORES_BACEN,
                self.functions.columns_servidores,
                schemas[self.variables.FILENAME_SERVIDORES_BACEN],
                select_columns_Servidores,
                self.ingestion_args["table_servidores_federais"],
                self.append_mode,
                6,
            ),
            "servidores-siape": ingestion_task(
                "servidores-federais",
                "SERVIDORES/SERVPUBLICOS/SIAPE/ENTRADA/",
                self.variables.FILENAME_SERVIDORES_SIAPE,
                self.functions.columns_servidores,
                schemas[self.variables.FILENAME_SERVIDORES_SIAPE],
                select_columns_Servidores,
                self.ingestion_args["table_servidores_federais"],
                self.append_mode,
                6,
            ),
            "honorarios-advoc": ingestion_task(
                "servidores-federais",
                "SERVIDORES/HONORARIOSADVOC/ENTRADA/",
                self.variables.FILENAME_HONORARIOS_ADVOC,
                self.functions.columns_honorarios_advoc,
                schemas[self.variables.FILENAME_HONORARIOS_ADVOC],
                select_columns_Honorarios_Advoc,
                self.ingestion_args["table_honorarios_advoc"],
                self.append_mode,
                6,
            ),
            "honorarios-jetons": ingestion_task(
                "servidores-federais",
                "SERVIDORES/HONORARIOSJETONS/ENTRADA/",
                self.variables.FILENAME_HONORARIOS_JETONS,
                self.functions.columns_honorarios_jetons,
                schemas[self.variables.FILENAME_HONORARIOS_JETONS],
                select_columns_Honorarios_Jetons,
                self.ingestion_args["table_honorarios_jetons"],
                self.append_mode,
                6,
            ),
            "servidores-sp": ingestion_task(
                "servidores-sp",
                "SERVIDORES/ESTADUAIS/SP/ENTRADA/",
                self.variables.FILENAME_SERVIDORES_SP,
                self.functions.columns_servidores_sp,
                schemas[self.variables.FILENAME_SERVIDORES_SP],
                select_columns_Servidores_SP,
                self.ingestion_args["table_servidores_sp"],
                self.append_mode,
                6,
            ),
            "servidores-mg": ingestion_task(
                "servidores-mg",
                "SERVIDORES/ESTADUAIS/MG/ENTRADA/",
                self.variables.FILENAME_SERVIDORES_MG,
                self.functions.columns_servidores_mg,
                schemas[self.variables.FILENAME_SERVIDORES_MG],
                select_columns_Servidores_MG,
                self.ingestion_args["table_servidores_mg"],
                self.append_mode,
                6,
            ),
            "servidores-es": ingestion_task(
                "servidores-es",
                "SERVIDORES/ESTADUAIS/ES/ENTRADA/",
                self.variables.FILENAME_SERVIDORES_ES,
                self.functions.columns_servidores_es,
                schemas[self.variables.FILENAME_SERVIDORES_ES],
                select_columns_Servidores_ES,
                self.ingestion_args["table_servidores_es"],
                self.append_mode,
                6,
            ),
            "servidores-sc": ingestion_task(
                "servidores-sc",
                "SERVIDORES/ESTADUAIS/SC/ENTRADA/",
                self.variables.FILENAME_SERVIDORES_SC,
                self.functions.columns_servidores_sc,
                schemas[self.variables.FILENAME_SERVIDORES_SC],
                select_columns_Servidores_SC,
                self.ingestion_args["table_servidores_sc"],
                self.append_mode,
                6,
            ),
            "servidores-pr": ingestion_task(
                "servidores-pr",
                "SERVIDORES/ESTADUAIS/PR/ENTRADA/",
                self.variables.FILENAME_SERVIDORES_PR,
                self.functions.columns_servidores_pr,
                schemas[self.variables.FILENAME_SERVIDORES_PR],
                select_columns_Servidores_PR,
                self.ingestion_args["table_servidores_pr"],
                self.overwrite_mode,
                1,
            ),
            "fornecedores-compras": ingestion_task(
                "fornecedores-gov",
                "FORNECEDORES/COMPRAS/ENTRADA/",
                self.variables.FILENAME_FORNECEDORES_COMPRAS,
                self.functions.columns_fornecedores_compras,
                schemas[self.variables.FILENAME_FORNECEDORES_COMPRAS],
                select_columns_fornecedores_compras,
                self.ingestion_args["table_fornecedores_compras"],
                self.append_mode,
                6,
            ),
            "fornecedores-item_compra": ingestion_task(
                "fornecedores-gov",
                "FORNECEDORES/ITEMCOMPRA/ENTRADA/",
                self.variables.FILENAME_FORNECEDORES_ITEM_COMPRA,
                self.functions.columns_fornecedores_item_compra,
                schemas[self.variables.FILENAME_FORNECEDORES_ITEM_COMPRA],
                select_columns_fornecedores_item_compra,
                self.ingestion_args["table_fornecedores_item_compra"],
                self.append_mode,
                6,
            ),
            "fornecedores-termo_aditivo": ingestion_task(
                "fornecedores-gov",
                "FORNECEDORES/TERMOADITIVO/ENTRADA/",
                self.variables.FILENAME_FORNECEDORES_TERMO_ADITIVO,
                self.functions.columns_fornecedores_termo_aditivo,
                schemas[self.variables.FILENAME_FORNECEDORES_TERMO_ADITIVO],
                select_columns_fornecedores_termo_aditivo,
                self.ingestion_args["table_fornecedores_termo_aditivo"],
                self.append_mode,
                6,
            ),
            "cnpj-cnaes": ingestion_task(
                "cnpj-cadastros",
                "CNPJ/CNAES/ENTRADA/",
                self.variables.FILENAME_CNPJ_CNAES,
                self.functions.columns_cnpj_cnaes,
                schemas[self.variables.FILENAME_CNPJ_CNAES],
                select_columns_Cnaes,
                self.ingestion_args["table_cnpj_cnaes"],
                self.append_mode,
                1,
            ),
            "cnpj-empresas": ingestion_task(
                "cnpj-cadastros",
                "CNPJ/EMPRESAS/ENTRADA/",
                self.variables.FILENAME_CNPJ_EMPRESAS,
                self.functions.columns_cnpj_empresas,
                schemas[self.variables.FILENAME_CNPJ_EMPRESAS],
                select_columns_Empresas,
                self.ingestion_args["table_cnpj_empresas"],
                self.append_mode,
                1,
            ),
            "cnpj-estabelecimentos": ingestion_task(
                "cnpj-cadastros",
                "CNPJ/ESTABELECIMENTOS/ENTRADA/",
                self.variables.FILENAME_CNPJ_ESTABELECIMENTOS,
                self.functions.columns_cnpj_estabelecimentos,
                schemas[self.variables.FILENAME_CNPJ_ESTABELECIMENTOS],
                select_columns_Estabelecimentos,
                self.ingestion_args["table_cnpj_estabelecimentos"],
                self.append_mode,
                1,
            ),
            "cnpj-socios": ingestion_task(
                "cnpj-cadastros",
                "CNPJ/SOCIOS/ENTRADA/",
                self.variables.FILENAME_CNPJ_SOCIOS,
                self.functions.columns_cnpj_socios,
                schemas[self.variables.FILENAME_CNPJ_SOCIOS],
                select_columns_Socios,
                self.ingestion_args["table_cnpj_socios"],
                self.append_mode,
                1,
            ),
            "cnpj-motivos": ingestion_task(
                "cnpj-cadastros",
                "CNPJ/MOTIVOS/ENTRADA/",
                self.variables.FILENAME_CNPJ_MOTIVOS,
                self.functions.columns_cnpj_motivos,
                schemas[self.variables.FILENAME_CNPJ_MOTIVOS],
                select_columns_Motivos,
                self.ingestion_args["table_cnpj_motivos"],
                self.append_mode,
                1,
            ),
            "cnpj-municipios": ingestion_task(
                "cnpj-cadastros",
                "CNPJ/MUNICIPIOS/ENTRADA/",
                self.variables.FILENAME_CNPJ_MUNICIPIOS,
                self.functions.columns_cnpj_municipios,
                schemas[self.variables.FILENAME_CNPJ_MUNICIPIOS],
                select_columns_Municipios,
                self.ingestion_args["table_cnpj_municipios"],
                self.append_mode,
                1,
            ),
            "cnpj-natureza_juridica": ingestion_task(
                "cnpj-cadastros",
                "CNPJ/NATUREZASJURIDICAS/ENTRADA/",
                self.variables.FILENAME_CNPJ_NATUREZA_JURIDICA,
                self.functions.columns_cnpj_natureza_juridica,
                schemas[self.variables.FILENAME_CNPJ_NATUREZA_JURIDICA],
                select_columns_NaturezaJuridica,
                self.ingestion_args["table_cnpj_natureza_juridica"],
                self.append_mode,
                1,
            ),
            "cnpj-paises": ingestion_task(
                "cnpj-cadastros",
                "CNPJ/PAISES/ENTRADA/",
                self.variables.FILENAME_CNPJ_PAISES,
                self.functions.columns_cnpj_paises,
                schemas[self.variables.FILENAME_CNPJ_PAISES],
                select_columns_Paises,
                self.ingestion_args["table_cnpj_paises"],
                self.append_mode,
                1,
            ),
            "cnpj-qualificacoes_socios": ingestion_task(
                "cnpj-cadastros",
                "CNPJ/QUALIFICACOESSOCIOS/ENTRADA/",
                self.variables.FILENAME_CNPJ_QUALIFICACOES_SOCIOS,
                self.functions.columns_cnpj_qualific_socios,
                schemas[self.variables.FILENAME_CNPJ_QUALIFICACOES_SOCIOS],
                select_columns_QualificoesSocios,
                self.ingestion_args["table_cnpj_qualific_socios"],
                self.append_mode,
                1,
            ),
            "cnpj-simples": ingestion_task(
                "cnpj-cadastros",
                "CNPJ/SIMPLES/ENTRADA/",
                self.variables.FILENAME_CNPJ_SIMPLES,
                self.functions.columns_cnpj_simples,
                schemas[self.variables.FILENAME_CNPJ_SIMPLES],
                select_columns_Simples,
                self.ingestion_args["table_cnpj_simples"],
                self.append_mode,
                1,
            ),
            "cnpj-imunes": ingestion_task(
                "cnpj-regime-tributario",
                "CNPJ/REGIMETRIBUTARIO/ISENTAS/ENTRADA/",
                self.variables.FILENAME_CNPJ_IMUNES,
                self.functions.columns_cnpj_imunes,
                schemas[self.variables.FILENAME_CNPJ_IMUNES],
                select_columns_ImunesIsentas,
                self.ingestion_args["table_cnpj_imunes"],
                self.append_mode,
                1,
            ),
            "cnpj-lucro_arbitrado": ingestion_task(
                "cnpj-regime-tributario",
                "CNPJ/REGIMETRIBUTARIO/LUCROARBITRADO/ENTRADA/",
                self.variables.FILENAME_CNPJ_LUCRO_ARBITRADO,
                self.functions.columns_cnpj_lucro_arbitrado,
                schemas[self.variables.FILENAME_CNPJ_LUCRO_ARBITRADO],
                select_columns_LucroArbitrado,
                self.ingestion_args["table_cnpj_lucro_arbitrado"],
                self.append_mode,
                1,
            ),
            "cnpj-lucro_real": ingestion_task(
                "cnpj-regime-tributario",
                "CNPJ/REGIMETRIBUTARIO/LUCROREAL/ENTRADA/",
                self.variables.FILENAME_CNPJ_LUCRO_REAL,
                self.functions.columns_cnpj_lucro_real,
                schemas[self.variables.FILENAME_CNPJ_LUCRO_REAL],
                select_columns_LucroReal,
                self.ingestion_args["table_cnpj_lucro_real"],
                self.append_mode,
                1,
            ),
            "cnpj-lucro_presumido": ingestion_task(
                "cnpj-regime-tributario",
                "CNPJ/REGIMETRIBUTARIO/LUCROPRESUMIDO/ENTRADA/",
                self.variables.FILENAME_CNPJ_LUCRO_PRESUMIDO,
                self.functions.columns_cnpj_lucro_presumido,
                schemas[self.variables.FILENAME_CNPJ_LUCRO_PRESUMIDO],
                select_columns_LucroPresumido,
                self.ingestion_args["table_cnpj_lucro_presumido"],
                self.append_mode,
                1,
            ),
            "debitos-previdenciario": ingestion_task(
                "debitos-trabalhistas",
                "DEBITOSTRABALHISTAS/PREVIDENCIARIO/ENTRADA/",
                self.variables.FILENAME_DEBITOS_PREVIDENCIARIO,
                self.functions.columns_debitos_prev,
                schemas[self.variables.FILENAME_DEBITOS_PREVIDENCIARIO],
                select_columns_Debitos_Prev,
                self.ingestion_args["table_debitos_prev"],
                self.append_mode,
                3,
            ),
            "debitos-nao-previdenciario": ingestion_task(
                "debitos-trabalhistas",
                "DEBITOSTRABALHISTAS/NAOPREVIDENCIARIO/ENTRADA/",
                self.variables.FILENAME_DEBITOS_NAO_PREVIDENCIARIO,
                self.functions.columns_debitos_nao_prev,
                schemas[self.variables.FILENAME_DEBITOS_NAO_PREVIDENCIARIO],
                select_columns_Debitos_Nao_Prev,
                self.ingestion_args["table_debitos_nao_prev"],
                self.append_mode,
                3,
            ),
            "debitos-fgts": ingestion_task(
                "debitos-trabalhistas",
                "DEBITOSTRABALHISTAS/FGTS/ENTRADA/",
                self.variables.FILENAME_DEBITOS_FGTS,
                self.functions.columns_debitos_fgts,
                schemas[self.variables.FILENAME_DEBITOS_FGTS],
                select_columns_Debitos_FGTS,
                self.ingestion_args["table_debitos_fgts"],
                self.append_mode,
                3,
            ),
            "servidores-df-desp-emp": ingestion_task(
                "servidores-df-despesa",
                "SERVIDORES/ESTADUAIS/STAGING/DF/DESPESA/EMPENHO",
                self.variables.FILENAME_DESP_EMPENHO,
                self.functions.columns_servidores_df_desp_emp,
                schemas[self.variables.FILENAME_DESP_EMPENHO],
                select_columns_Servidores_DF_Desp_Emp,
                self.ingestion_args["table_servidores_df_desp_emp"],
                self.append_mode,
                1,
            ),
            "servidores-df-desp-emp-desc": ingestion_task(
                "servidores-df-despesa",
                "SERVIDORES/ESTADUAIS/STAGING/DF/DESPESA/EMPENHODESCRICAO",
                self.variables.FILENAME_DESP_EMPENHO_DESC,
                self.functions.columns_servidores_df_desp_emp_desc,
                schemas[self.variables.FILENAME_DESP_EMPENHO_DESC],
                select_columns_Servidores_DF_Desp_Emp_Descricao,
                self.ingestion_args["table_servidores_df_desp_emp_desc"],
                self.append_mode,
                1,
            ),
            "servidores-df-desp-emp-sub": ingestion_task(
                "servidores-df-despesa",
                "SERVIDORES/ESTADUAIS/STAGING/DF/DESPESA/EMPENHOSUBELEMENTO",
                self.variables.FILENAME_DESP_EMPENHO_SUB,
                self.functions.columns_servidores_df_desp_emp_sub,
                schemas[self.variables.FILENAME_DESP_EMPENHO_SUB],
                select_columns_Servidores_DF_Desp_Emp_Subelemento,
                self.ingestion_args["table_servidores_df_desp_emp_sub"],
                self.append_mode,
                1,
            ),
            "servidores-df-desp-lanc": ingestion_task(
                "servidores-df-despesa",
                "SERVIDORES/ESTADUAIS/STAGING/DF/DESPESA/LANCAMENTO",
                self.variables.FILENAME_DESP_LANCAMENTO,
                self.functions.columns_servidores_df_desp_lanc,
                schemas[self.variables.FILENAME_DESP_LANCAMENTO],
                select_columns_Servidores_DF_Desp_Lanc,
                self.ingestion_args["table_servidores_df_desp_lanc"],
                self.append_mode,
                1,
            ),
            "servidores-df-desp-nt-lanc-emp": ingestion_task(
                "servidores-df-despesa",
                "SERVIDORES/ESTADUAIS/STAGING/DF/DESPESA/NOTALANCAMENTOEMPENHO",
                self.variables.FILENAME_DESP_NT_LANC_NT_EMPENHO,
                self.functions.columns_servidores_df_desp_nt_lanc_emp,
                schemas[self.variables.FILENAME_DESP_NT_LANC_NT_EMPENHO],
                select_columns_Servidores_DF_Desp_Nota_Lanc_Emp,
                self.ingestion_args["table_servidores_df_desp_nt_lanc_emp"],
                self.append_mode,
                1,
            ),
            "servidores-df-desp-nt-lanc-evento": ingestion_task(
                "servidores-df-despesa",
                "SERVIDORES/ESTADUAIS/STAGING/DF/DESPESA/NOTALANCAMENTOEVENTO",
                self.variables.FILENAME_DESP_NT_LANC_EVENTO,
                self.functions.columns_servidores_df_desp_nt_lanc_evento,
                schemas[self.variables.FILENAME_DESP_NT_LANC_EVENTO],
                select_columns_Servidores_DF_Desp_Nota_Lanc_Evento,
                self.ingestion_args["table_servidores_df_desp_nt_lanc_evento"],
                self.append_mode,
                1,
            ),
            "servidores-df-desp-ord-cancelada": ingestion_task(
                "servidores-df-despesa",
                "SERVIDORES/ESTADUAIS/STAGING/DF/DESPESA/ORDEMBANCARIACANCELADA",
                self.variables.FILENAME_DESP_ORD_BANC_CANCELADA,
                self.functions.columns_servidores_df_ord_banc_cancel,
                schemas[self.variables.FILENAME_DESP_ORD_BANC_CANCELADA],
                select_columns_Servidores_DF_Desp_Ord_Banc_Cancelada,
                self.ingestion_args["table_servidores_df_desp_ord_cancelada"],
                self.append_mode,
                1,
            ),
            "servidores-df-desp-ord-nt-emp": ingestion_task(
                "servidores-df-despesa",
                "SERVIDORES/ESTADUAIS/STAGING/DF/DESPESA/ORDEMBANCARIAEMPENHO",
                self.variables.FILENAME_DESP_ORD_BANC_NT_EMPENHO,
                self.functions.columns_servidores_df_desp_ord_nt_emp,
                schemas[self.variables.FILENAME_DESP_ORD_BANC_NT_EMPENHO],
                select_columns_Servidores_DF_Desp_Ord_Banc_Nota_Emp,
                self.ingestion_args["table_servidores_df_desp_ord_nt_emp"],
                self.append_mode,
                1,
            ),
            "servidores-df-desp-pagamento": ingestion_task(
                "servidores-df-despesa",
                "SERVIDORES/ESTADUAIS/STAGING/DF/DESPESA/PAGAMENTO",
                self.variables.FILENAME_DESP_PAGAMENTO,
                self.functions.columns_servidores_df_desp_pgto,
                schemas[self.variables.FILENAME_DESP_PAGAMENTO],
                select_columns_Servidores_DF_Desp_Pgto,
                self.ingestion_args["table_servidores_df_desp_pagamento"],
                self.append_mode,
                1,
            ),
            "servidores-df-desp-principal": ingestion_task(
                "servidores-df-despesa",
                "SERVIDORES/ESTADUAIS/STAGING/DF/DESPESA/PRINCIPAL",
                self.variables.FILENAME_DESP_PRINCIPAL,
                self.functions.columns_servidores_df_desp_principal,
                schemas[self.variables.FILENAME_DESP_PRINCIPAL],
                select_columns_Servidores_DF_Desp_Principal,
                self.ingestion_args["table_servidores_df_desp_principal"],
                self.append_mode,
                1,
            ),
            "servidores-df-licitacao": ingestion_task(
                "servidores-df-licitacao",
                "SERVIDORES/ESTADUAIS/STAGING/DF/LICITACAO",
                self.variables.FILENAME_LICITACAO,
                self.functions.columns_servidores_df_licitacao,
                schemas[self.variables.FILENAME_LICITACAO],
                select_columns_Servidores_DF_Licitacao,
                self.ingestion_args["table_servidores_df_licitacao"],
                self.append_mode,
                1,
            ),
            "servidores-df-orgao": ingestion_task(
                "servidores-df-orgao",
                "SERVIDORES/ESTADUAIS/STAGING/DF/ORGAO",
                self.variables.FILENAME_SERVIDORES_ORGAO,
                self.functions.columns_servidores_df_orgao,
                schemas[self.variables.FILENAME_SERVIDORES_ORGAO],
                select_columns_Servidores_DF_Orgao,
                self.ingestion_args["table_servidores_df_orgao"],
                self.append_mode,
                1,
            ),
            "servidores-df-patrimonio": ingestion_task(
                "servidores-df-patrimonio",
                "SERVIDORES/ESTADUAIS/STAGING/DF/PATRIMONIO",
                self.variables.FILENAME_PATRIMONIO,
                self.functions.columns_servidores_df_patrimonio,
                schemas[self.variables.FILENAME_PATRIMONIO],
                select_columns_Servidores_DF_Patrimonio,
                self.ingestion_args["table_servidores_df_patrimonio"],
                self.overwrite_mode,
                1,
            ),
            "servidores-df-receita": ingestion_task(
                "servidores-df-receita",
                "SERVIDORES/ESTADUAIS/STAGING/DF/RECEITA",
                self.variables.FILENAME_RECEITA,
                self.functions.columns_servidores_df_receita,
                schemas[self.variables.FILENAME_RECEITA],
                select_columns_Servidores_DF_Receita,
                self.ingestion_args["table_servidores_df_receita"],
                self.append_mode,
                1,
            ),
            "servidores-df-remuneracao": ingestion_task(
                "servidores-df-remuneracao",
                "SERVIDORES/ESTADUAIS/STAGING/DF/REMUNERACAO/REMUNERACAO",
                self.variables.FILENAME_REMUNERACAO,
                self.functions.columns_servidores_df_remuneracao,
                schemas[self.variables.FILENAME_REMUNERACAO],
                select_columns_Servidores_DF_Remuneracao,
                self.ingestion_args["table_servidores_df_remuneracao"],
                self.append_mode,
                1,
            ),
            "servidores-df-remuneracao-det": ingestion_task(
                "servidores-df-remuneracao",
                "SERVIDORES/ESTADUAIS/STAGING/DF/REMUNERACAO/REMUNERACAODETALHAMENTO",
                self.variables.FILENAME_REMUNERACAO_DETALHAMENTO,
                self.functions.columns_servidores_df_remuneracao_det,
                schemas[self.variables.FILENAME_REMUNERACAO_DETALHAMENTO],
                select_columns_Servidores_DF_Remuneracao_Detalhamento,
                self.ingestion_args["table_servidores_df_remuneracao_det"],
                self.append_mode,
                1,
            ),
            "sancoes_ceis": ingestion_task(
                "sancoes",
                "SANCOES/CEIS/ENTRADA/",
                self.variables.FILENAME_CEIS,
                self.functions.columns_ceis,
                schemas[self.variables.FILENAME_CEIS],
                select_columns_CEIS,
                self.ingestion_args["table_sancoes_ceis"],
                self.append_mode,
                7,
            ),
            "sancoes_cepim": ingestion_task(
                "sancoes",
                "SANCOES/CEPIM/ENTRADA/",
                self.variables.FILENAME_CEPIM,
                self.functions.columns_cepim,
                schemas[self.variables.FILENAME_CEPIM],
                select_columns_CEPIM,
                self.ingestion_args["table_sancoes_cepim"],
                self.append_mode,
                7,
            ),
            "sancoes_cnep": ingestion_task(
                "sancoes",
                "SANCOES/CEPIM/ENTRADA/",
                self.variables.FILENAME_CNEP,
                self.functions.columns_cnep,
                schemas[self.variables.FILENAME_CNEP],
                select_columns_CNEP,
                self.ingestion_args["table_sancoes_cnep"],
                self.append_mode,
                7,
            ),
            "sancoes_acordos_leniencia": ingestion_task(
                "sancoes",
                "SANCOES/ACORDOSLENIENCIA/ACORDOS/ENTRADA/",
                self.variables.FILENAME_ACORDOS_LENIENCIA,
                self.functions.columns_acordos_leniencia,
                schemas[self.variables.FILENAME_ACORDOS_LENIENCIA],
                select_columns_AcordosLeniencia,
                self.ingestion_args["table_sancoes_acordos_leniencia"],
                self.append_mode,
                7,
            ),
            "sancoes_efeitos_leniencia": ingestion_task(
                "sancoes",
                "SANCOES/ACORDOSLENIENCIA/ACORDOS/ENTRADA/",
                self.variables.FILENAME_EFEITOS_LENIENCIA,
                self.functions.columns_efeitos_leniencia,
                schemas[self.variables.FILENAME_EFEITOS_LENIENCIA],
                select_columns_EfeitosLeniencia,
                self.ingestion_args["table_sancoes_efeitos_leniencia"],
                self.append_mode,
                7,
            ),
            "ibama": ingestion_task(
                "ibama",
                "IBAMA/ENTRADA/",
                self.variables.FILENAME_IBAMA,
                self.functions.columns_ibama,
                schemas[self.variables.FILENAME_IBAMA],
                select_columns_Ibama,
                self.ingestion_args["table_ibama"],
                self.overwrite_mode,
                1,
            ),
        }
        return tasks
